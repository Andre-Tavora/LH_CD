import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

apto_alvo = {
    'id': 2595,
    'nome': 'Skylit Midtown Castle',
    'host_id': 2845,
    'host_name': 'Jennifer',
    'bairro_group': 'Manhattan',
    'bairro': 'Midtown',
    'latitude': 40.75362,
    'longitude': -73.98377,
    'room_type': 'Entire home/apt',
    'minimo_noites': 1,
    'numero_de_reviews': 45,
    'ultima_review': '2019-05-21',
    'reviews_por_mes': 0.38,
    'calculado_host_listings_count': 2,
    'disponibilidade_365': 355
}

remover_colunas = ['nome', 'host_name', 'ultima_review', 'room_type', 'bairro_group', 'bairro']
df_apto_alvo = pd.DataFrame([apto_alvo]).drop(columns=remover_colunas)

caminho_csv = 'teste_indicium_precificacao.csv'
df_original = pd.read_csv(caminho_csv)

def deletar_valores_zerados(df):
    return df.loc[~(df == 0).any(axis=1)]

df_novo = deletar_valores_zerados(df_original)

nulos = df_novo.isnull().sum().sum()
nulos

scaler_minmax = MinMaxScaler()
df_novo[['latitude_normalizada', 'longitude_normalizada']] = scaler_minmax.fit_transform(df_novo[['latitude', 'longitude']])

X = df_novo.drop(['latitude', 'longitude', 'room_type', 'price', 'nome', 'host_name', 'ultima_review', 'bairro_group', 'bairro'], axis=1)
y = df_novo['price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

scaler_std = StandardScaler()
X_train_scaled = scaler_std.fit_transform(X_train)
X_test_scaled = scaler_std.transform(X_test)

modelo = LinearRegression()
modelo.fit(X_train_scaled, y_train)
y_pred = modelo.predict(X_test_scaled)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print('MAE:', {mae})
print('MSE:', {mse})
print('RMSE: ', {rmse})
print('R2: ',{r2})

df_apto_alvo[['latitude_normalizada', 'longitude_normalizada']] = scaler_minmax.transform(df_apto_alvo[['latitude', 'longitude']])
df_apto_alvo = df_apto_alvo.drop(['latitude', 'longitude'], axis=1)

df_apto_alvo = df_apto_alvo[X.columns]

apto_alvo_scaled = scaler_std.transform(df_apto_alvo)

preco_previsto = modelo.predict(apto_alvo_scaled)[0]
print(f'Pre√ßo apartamento alvo: ${preco_previsto:.2f}')